#!/usr/bin/python3
#-*- coding: utf-8 -*-
##############################################
# Home	: http://netkiller.github.io
# Author: Neo <netkiller@msn.com>
##############################################
import os,io,sys
import logging, configparser
import threading
from optparse import OptionParser, OptionGroup
import time
from datetime import datetime

basedir=os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

try:
	sys.path.append(basedir + '/lib/python3.4/site-packages')
	from rsync import *
	from git import *
	#import getpass
except ImportError as err:
	print("Error: %s" %(err))

CONFIG_DIR= basedir + '/etc'
#PROJECT_DIR = os.path.expanduser('~/project')
##############################################
class Deployment():
	debug = False
	def __init__(self):
		self.config = {}

		usage = "usage: %prog [options] {branch|stage} project"
		self.parser = OptionParser(usage)

		group = OptionGroup(self.parser, "stage", "{development | testing | production} <host>.<domain>")
		group.add_option("-r", "--revert", dest="revert", default=False,help="revert to revision")
		group.add_option('','--clean', action="store_true", help='')
		group.add_option("-s", "--silent", action="store_true", help="Silent mode. Don't output anything")
		self.parser.add_option_group(group)

		group = OptionGroup(self.parser, 'backup', 'backup <host>.<domain>')
		group.add_option('','--backup', dest="backup", help='backup remote to local', default=None)
		self.parser.add_option_group(group)

		group = OptionGroup(self.parser, "branch", "branch management")
		group.add_option("-c", "--checkout", dest="checkout", metavar="master|trunk", default='', help="checkout branch")
		group.add_option('-n', "--new", dest="new", metavar="branch", default=None, help="Create new branch")
		group.add_option("-d", "--delete", dest="delete", metavar="branch", help="delete branch")
		group.add_option('','--release', dest="release", help='release version exampe:'+ time.strftime('%Y-%m-%d',time.localtime(time.time())) , default=None)
		#group.add_option("-e", action="store_true", help="Print every action done")
		self.parser.add_option_group(group)

		group = OptionGroup(self.parser, "merge", "merge {development | testing | production}")
		group.add_option('-t','--to', dest='to', metavar='master', help='such as master')
		group.add_option('-f','--from', dest='froms', metavar='your', help='from branch')
		self.parser.add_option_group(group)

		#group = OptionGroup(self.parser, "build", "build {development | testing | production}")
		#group.add_option('','--build', action="store_true", help='build', default=False)
		#group.add_option('','--package', action="store_true", help='package', default=False)
		#group.add_option('','--install', help='install', default='make')		
		#self.parser.add_option_group(group)

		group = OptionGroup(self.parser, "unittest", "unittest {development | testing | production}")
		#group.add_option('','--testsuite', help='logs file.', default='backup.log')
		#group.add_option('','--testcase', help='logs file.', default='backup.log')
		self.parser.add_option_group(group)

		self.config	= self.configure(CONFIG_DIR+'/deployment.cfg','scm')
		self.project	= self.configure(CONFIG_DIR+'/deployment.cfg','project')
		self.logging = self.logfile(self.config['logdir']+'/'+self.config['logfile'])

	def configure(self,inifile, section = None):
		conf = {}
		try:
			if not os.path.exists(inifile):
				raise Exception('Cannot open file', inifile)
			config = configparser.SafeConfigParser()
			config.read(inifile)
			if section :
				conf = dict(config.items(section))
			else:
				for sect in config.sections():
					conf[sect] = dict(config.items(sect))

				#for (key,value) in cpr.items(sect):
				#	 self.config[key] = value
			#print('Cannot read file: '+inifile)
		except configparser.NoSectionError as err:
			print("Error: %s %s" %(err, inifile))
			sys.exit(1)
		except Exception as err:
			print("Error: %s %s" %(err, inifile))
			sys.exit(1)
		return(conf)

	def logfile(self,file):
		log = None
		try:
			logging.basicConfig(
				level=logging.NOTSET,
				format='%(asctime)s %(levelname)-8s %(message)s',
				datefmt='%Y-%m-%d %H:%M:%S',
				filename=file,
				filemode='a'
			)
			log = logging.getLogger()
			#handler = logging.handlers.TimedRotatingFileHandler(file, 'M', 1, 0)
			#handler.suffix = "%Y%m%d-%H%M.log"
			#log.addHandler(handler)
		except AttributeError as err:
			print("Error: %s %s" %(err, file))
			sys.exit(2)
		except FileNotFoundError as err:
			print("Error: %s %s" %(err, file))
			sys.exit(2)
		except PermissionError as err:
			print("Error: %s %s" %(err, file))
			sys.exit(2)
		return(log)

	def buildconfig(self, stage, domain, source):
		try:
			inifile = os.path.expanduser(self.project['cfgdir']+'/config/'+stage+'/'+domain+'.ini')
			if os.path.exists(inifile):
				sections = self.configure(inifile)
				#print(sections)
				for filename in sections:
					cfgfile = source+'/'+filename
					#print(cfgfile)
					self.logging.debug('build config file: '+cfgfile);
					if os.path.isfile(cfgfile) and os.access(cfgfile, os.R_OK):
						conf = self.configure(inifile, filename)
						with open(cfgfile,'r') as f:
							lines = []
							for line in f.readlines():
								for key, val in conf.items():
									#print(key+':'+val)
									self.logging.debug('replace config item: '+key+'=>'+val);
									lines.append(line.replace('{{'+key+'}}', val))
						with open(cfgfile, 'w') as f:
							for line in lines:
								f.write(line)

		except IOError as err:
			print("Error: %s %s" %(err, cfgfile))

	def deploy(self, stage, domain):
		self.logging.info('deployment '+ self.stage+' '+self.domain)
		try:
			inifile = os.path.expanduser(self.project['cfgdir']+'/'+stage+'/'+domain[domain.find('.')+1:]+'.ini')
			host = domain[:domain.find('.')]
			conf = self.configure(inifile, host)

			if ('source' not in conf):
				source = self.project['source'] +'/'+ stage +'/'+ domain
			else:
				source = conf['source']

			source = os.path.expanduser(source)

			if self.options.clean:
				import shutil
				shutil.rmtree(source)
				self.logging.warning('clean '+ source);

			if self.options.backup:
				backup = Rsync()
				backup.option('-auzv')
				backup.source(conf['remote']+'::'+conf['destination'])
				backup.destination(self.options.backup)
				backup.execute()
				self.logging.debug(backup.string());
				self.logging.info('backup '+conf['remote']+'::'+conf['destination']+' -> '+self.options.backup);
				return()

			git = Git(source, self.logging)
			if os.path.isdir(source):
				if self.options.revert :
					revision = self.options.revert
					git.checkout(revision).branch().execute()
					self.logging.info('revision '+ revision);
				else:
					git.reset().pull().execute()
					self.logging.info('pull '+ conf['repository']);
			else:
				git.clone(conf['repository']).execute()
				if 'branch' in conf:
					git.checkout(conf['branch']).execute()
					self.logging.info('checkout branch '+ conf['branch']);
				else:
					self.logging.info('clone '+ conf['repository']);
				#git.debug()

			self.buildconfig(stage, domain, source)
			
			if ('build' in conf):
				os.system(os.path.expanduser(self.project['cfgdir']+'/build/'+domain+'.sh'))
			#sys.exit()

			rsync = Rsync()

			if('option' in conf):
				rsync.option('-auzv --exclude=.git --exclude=.svn --exclude=.gitignore' + conf['option'])
			else:
				rsync.option('-auzv --exclude=.git --exclude=.svn --exclude=.gitignore')

			if('delete' in conf):
				if conf['delete'].lower() in ("yes", "true", "y", "enable") :
					rsync.delete()

			if('logfile' in conf):
				if conf['logfile'] :
					rsync.logfile(conf['logfile'])
			else:
				logdir = os.path.expanduser(self.project['logdir']+'/'+stage)
				if not os.path.exists(logdir):
					os.makedirs(logdir)
				conf['logfile'] = logdir+'/'+domain+'.'+datetime.today().strftime('%Y-%m-%d')+'.log'
				#.%H:%M:%S
				rsync.logfile(conf['logfile'])

			if('password' in conf):
				rsync.password(os.path.expanduser(conf['password']))

			if('backup' in conf):
				if conf['backup'] :
					rsync.backup(conf['backup'])
			else:
				conf['backup'] = '/'+'backup'+'/'+domain+'/'+datetime.today().strftime('%Y-%m-%d.%H:%M:%S')
				rsync.backup(conf['backup'])

			if('exclude' in conf):
				rsync.exclude(os.path.expanduser(self.project['cfgdir'] + '/exclude/' + conf['exclude']))

			rsync.source(source+'/')

			
			for rhost in conf['remote'].split(',') :
				rsync.destination(rhost.strip()+'::'+conf['destination'])
				rsync.execute()
				self.logging.debug(rsync.debug());

		except NameError as err:
			print(err)
		except KeyError as err:
			print("Error: %s %s" %(err, conf))
		except IOError as err:
			print(err)
		except AttributeError as err:
			print(err)
		#	self.logging.error(err)

	def branch(self,args):
		stage = args[1]
		domain =args[2]
		try:
			inifile = os.path.expanduser(self.project['cfgdir']+'/'+stage+'/'+domain[domain.find('.')+1:]+'.ini')
			host = domain[:domain.find('.')]
			conf = self.configure(inifile, host)

			if ('source' not in conf):
				source = self.project['source'] +'/'+ stage +'/'+ domain
			else:
				source = conf['source']

			source = os.path.expanduser(source)
			#if os.path.isdir(source):

			git = Git(source, self.logging)
			if self.options.checkout:
				git.branch(self.options.checkout)
				self.logging.info('checkout branch '+ stage+' '+domain+' -> '+self.options.checkout)
			elif self.options.delete:
				git.branch(self.options.delete, 'delete')
				self.logging.info('delete branch '+ stage+' '+domain+' -> '+self.options.delete)
			elif self.options.new:
				git.branch(self.options.new, 'new')
				self.logging.info('create branch '+ stage+' '+domain+' -> '+self.options.new)
			elif self.options.release:
				git.tag(self.options.release)
			else:
				git.branch()
				self.logging.info('branch '+ stage+' '+domain)
			#self.logging.debug(git.debug());
			git.execute()

		except configparser.NoSectionError as err:
			self.logging.error(err)
			print(err)
		except FileNotFoundError as err:
			self.logging.error(err)
			print(err)
	def merge(self,args, t=None, f=None):
		try:
			stage = args[1]
			domain =args[2]

			host = domain[:domain.find('.')]
			conf = self.configure(os.path.expanduser(self.project['cfgdir']+'/'+stage+'/'+domain[domain.find('.')+1:]+'.ini' , host))

			workspace = os.path.expanduser('~/.workspace')

			project = workspace +'/'+ domain
			git = Git(project, self.logging)

			if not os.path.exists(workspace):
				os.makedirs(workspace)

			if not os.path.exists(project):
				git.clone(conf['repository']).execute()
			else:
				git.reset().pull().execute()

			if t and f :
				git.checkout(f).execute()
				git.pull().execute()
				git.checkout(t).execute()
				git.pull().execute()
				git.merge(f).execute()
				self.logging.info('merge branch to '+ t +' from '+f)
			else:
				if stage == 'testing' :
					git.checkout('development').execute()
					git.pull().execute()

					git.checkout('testing').execute()
					git.pull().execute()

					git.merge('development').execute()
					self.logging.info('merge branch to testing from development')
				if stage == 'production' :
					git.checkout('testing').execute()
					git.pull().execute()
					git.checkout('production').execute()
					git.pull().execute()
					git.merge('testing').execute()
					self.logging.info('merge branch to production from testing')
				if stage == 'development' :
					git.checkout(f).execute()
					git.pull().execute()
					git.checkout('development').execute()
					git.pull().execute()
					git.merge(f).execute()
					self.logging.info('merge branch to development from ' + f)
		except configparser.NoSectionError as err:
			print("Error: %s %s" %(err, ''))
		except Exception as err:
			print("Error: %s %s" %(err, ''))
			sys.exit(1)
	def list(self,stage):
		try:
			config = configparser.SafeConfigParser()
			#if domain == None:
			for file in os.listdir(os.path.expanduser(self.project['cfgdir']+'/'+stage)):
				if file.endswith(".ini"):
					config.read(os.path.expanduser(self.project['cfgdir']+'/'+stage+'/'+file))
					print(file)
					#for project in config.sections():
					#	print(project, end = ', ');
					print(config.sections())
					print()
		except FileNotFoundError as err:
			self.logging.error(err)
			print(err)
	def usage(self):
		self.parser.print_help()
		print("\n  Example: \n\tdeployment testing www.example.com\n\tdeployment production www.example.com --clean\n\tdeployment testing bbs.example.com --backup=/tmp/backup")
		print("\n  Homepage: http://netkiller.github.com\tAuthor: Neo <netkiller@msn.com>")
	def main(self):
		(self.options, args) = self.parser.parse_args()
		if self.debug:
			print("===================================")
			print(self.options, args)
			#os.getuid()
			#os.getlogin()
			print(self.config)
			print("===================================")

		if not args:
			self.usage()
		elif args[0] == 'branch':
			self.branch(args)
		elif args[0] == 'merge':
			if args[1] in ('development','testing','production'):
				self.merge(args, self.options.to, self.options.froms)
		elif args[0] in ('development','testing','production'):
			#if self.scm[(args[0])] != getpass.getuser():
			#	print("Current user "+os.getlogin()+" : Permission denied")
			#	sys.exit(127)
			if args.__len__() == 2:
				self.stage = args[0]
				self.domain =args[1]
				self.deploy(self.stage, self.domain)
			else:
				self.stage = args[0]
				self.list(self.stage)
		else:
			self.usage()
		self.logging.debug('---------------------------------------------')
if __name__ == '__main__':
	try:
		deployment = Deployment()
		#deployment.debug = True
		deployment.main()
	except KeyboardInterrupt:
		print ("Crtl+C Pressed. Shutting down.")
